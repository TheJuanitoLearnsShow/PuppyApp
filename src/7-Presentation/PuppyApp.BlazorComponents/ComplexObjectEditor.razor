@using Humanizer
@using Microsoft.FluentUI.AspNetCore.Components
@using Puppy.Types

<h2> Form </h2>
@foreach (var prop in PropertyDescriptor.ChildProperties)
{
    <br/>
    @(prop switch
    {
        IntPropertyDescriptor ip => (@<IntEditor PropertyDescriptor="@ip" OnValueChanged="OnValueChanged" />),
        StringPropertyDescriptor sp => (@<StringEditor PropertyDescriptor="@sp" />),
        DateTimeOffsetPropertyDescriptor dtop => (@<DateTimeEditor PropertyDescriptor="@dtop" />),
        _ => (@<p>Field type not recognized</p>)
    })
}

@code {
    private ComplexPropertyDescriptor _propertyDescriptor;
    private Dictionary<string, DataEntryInput> _fields = new();

    [Parameter]
    [EditorRequired]
    public ComplexPropertyDescriptor PropertyDescriptor
    {
        get => _propertyDescriptor;
        set
        {
            _propertyDescriptor = value;
            foreach (var prop in _propertyDescriptor.ChildProperties)
            {
                _fields[prop.Name] = new DataEntryInput() { PrimitiveValue = null };
            }
        }
    }

    private void OnValueChanged(string propName, string? newValue, bool isValid)
    {
        if (isValid)
        {
            _fields[propName].PrimitiveValue = newValue;
        }
    }

}